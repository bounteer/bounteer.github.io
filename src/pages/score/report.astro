---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";

const DIRECTUS_URL = "https://directus.bounteer.com";
const READ_TOKEN = "dZtMfEuzhzUS0YATh0pOZfBAdOYlhowE";
---

<Layout title="Role Fit Score Report - Bounteer">
  <Header />

  <!-- Alpine (remove if already loaded globally) -->
  <script src="https://unpkg.com/alpinejs@3.14.3/dist/cdn.min.js" defer
  ></script>
  <style is:inline>
    [x-cloak] {
      display: none !important;
    }
  </style>

  <script is:inline>
    // Single-source formatter for "YYYY-MM-DD HH:mm" (local time)
    function fmtMinutes(iso) {
      const d = new Date(iso);
      if (Number.isNaN(d.getTime())) return "—";
      const p = (n) => String(n).padStart(2, "0");
      return `${d.getFullYear()}-${p(d.getMonth() + 1)}-${p(d.getDate())} ${p(d.getHours())}:${p(d.getMinutes())}`;
    }

    window.reportViewer = ($el) => {
      const cfg = $el.dataset;
      return {
        // config
        directusUrl: cfg.directusUrl,
        readToken: cfg.readToken,

        // state
        reportId: "",
        loading: true,
        error: "",
        report: null,

        // helpers
        hasId() {
          return !!this.reportId;
        },
        hasReport() {
          return !!this.report;
        },
        overallScore() {
          return this.report?.overall_score ?? "—";
        },
        confidence() {
          const v = this.report?.confidence_level;
          return typeof v === "number" ? `${v}%` : "—";
        },
        prosList() {
          const raw = (this.report?.pros ?? "").toString();
          return raw
            .split("\n")
            .map((l) => l.replace(/^\s*-\s*/, "").trim())
            .filter(Boolean);
        },
        consList() {
          const raw = (this.report?.cons ?? "").toString();
          return raw
            .split("\n")
            .map((l) => l.replace(/^\s*-\s*/, "").trim())
            .filter(Boolean);
        },
        concernTags() {
          // Case 1: Directus returns array already
          return this.report.concern_tags;
        },
        createdMinutes() {
          const iso = this.report?.date_created;
          return iso ? fmtMinutes(iso) : "—";
        },
        candidateName() {
          const c = this.report?.user_created;
          if (!c) return "—";
          const first = (c.first_name || "").trim();
          const last = (c.last_name || "").trim();
          const combined = [first, last].filter(Boolean).join(" ");
          return combined || "—";
        },
        roleName() {
          return this.report?.submission?.job_description?.role_name ?? "—";
        },
        backfill_status() {
          return (
            this.report?.submission?.job_description?.backfill_status ??
            "failed parsing job description"
          );
        },
        companyName() {
          return this.report?.submission?.job_description?.company_name ?? "—";
        },

        async init() {
          const params = new URLSearchParams(window.location.search);
          this.reportId = params.get("id") || "";
          if (!this.hasId()) {
            this.loading = false;
            return;
          }
          await this.fetchReport();
        },

        async fetchReport() {
          this.loading = true;
          this.error = "";
          try {
            const url =
              `${this.directusUrl}/items/role_fit_score_report/${encodeURIComponent(this.reportId)}` +
              `?fields=*,user_created.first_name,user_created.last_name,` +
              `submission.job_description.role_name,submission.job_description.company_name,` +
              `submission.job_description.backfill_status`;
            const res = await fetch(url, {
              headers: { Authorization: `Bearer ${this.readToken}` },
            });
            const json = await res.json();
            if (!res.ok)
              throw new Error(
                json?.errors?.[0]?.message || `Fetch failed (${res.status})`,
              );
            this.report = json?.data ?? null;
          } catch (e) {
            this.error = e?.message || "Unexpected error";
          } finally {
            this.loading = false;
          }
        },
      };
    };
  </script>

  <main class="py-16 bg-white">
    <div class="container-custom max-w-4xl mx-auto px-4">
      <!-- SINGLE CARD WRAPPER -->
      <div
        class="relative rounded-2xl border border-gray-200 shadow-xl bg-white overflow-hidden"
        x-data="reportViewer($el)"
        x-init="init()"
        data-directus-url={DIRECTUS_URL}
        data-read-token={READ_TOKEN}
      >
        <!-- Loading overlay -->
        <div
          x-show="loading"
          class="absolute inset-0 z-10 flex items-center justify-center bg-white/80 backdrop-blur-sm"
          x-cloak
        >
          <div class="flex flex-col items-center gap-4">
            <svg
              class="h-10 w-10 animate-spin"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <circle
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"
                fill="none"
                opacity="0.25"></circle>
              <path
                d="M4 12a8 8 0 018-8"
                stroke="currentColor"
                stroke-width="4"
                fill="none"></path>
            </svg>
            <p class="text-sm text-gray-700">Loading…</p>
          </div>
        </div>

        <!-- CARD CONTENT -->
        <div class="p-8 md:p-10 min-w-0">
          <!-- No ID -->
          <div
            class="text-center py-12 text-gray-500"
            x-show="!hasId() && !loading"
            x-cloak
          >
            <p>
              No <code>id</code> provided. Visit as <code
                >/score/report?id=10</code
              >.
            </p>
          </div>

          <!-- Error -->
          <div
            class="mb-6 p-3 rounded-lg bg-red-50 text-red-700 text-sm"
            x-show="error"
            x-text="error"
            x-cloak
          >
          </div>

          <!-- Content (single card sections) -->
          <template x-if="hasId() && !loading && !error && hasReport()">
            <div class="space-y-8 break-words">
              <!-- Header -->
              <div class="space-y-1 text-center max-w-prose mx-auto">
                <h1 class="text-2xl md:text-3xl font-semibold text-gray-900">
                  Role Fit Score Report
                </h1>
                <!-- Candidate + Role -->
                <p class="text-sm text-gray-700">
                  Candidate: <span x-text="candidateName()"></span>
                  <span class="px-1">·</span>
                  Role: <span x-text="roleName()"></span>
                  <span class="px-1">@</span>
                  <span x-text="companyName()"></span>
                </p>
                <!-- JD Backfill status -->
                <template
                  x-if="backfill_status() && backfill_status().toLowerCase() !== 'success'"
                >
                  <p class="mt-1">
                    <span
                      class="inline-flex items-center gap-1 rounded-full bg-red-100 text-red-700 px-2 py-1 text-xs font-medium"
                      x-text="backfill_status()"
                    >
                    </span>
                  </p>
                </template>
                <p class="text-sm text-gray-500">
                  Report ID: <span x-text="reportId"></span>
                  <span class="px-1">·</span>
                  Created: <span x-text="createdMinutes()"></span>
                </p>
              </div>

              <!-- Score + Confidence (kept inside the same card) -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6 min-w-0">
                <div class="rounded-xl bg-gray-50 p-5">
                  <h2 class="text-lg md:text-xl font-semibold mb-2">
                    Overall Score
                  </h2>
                  <p class="text-4xl font-bold" x-text="overallScore()"></p>
                </div>
                <div class="rounded-xl bg-gray-50 p-5">
                  <h2 class="text-lg md:text-xl font-semibold mb-2">
                    Confidence Level
                  </h2>
                  <p class="text-4xl font-bold" x-text="confidence()"></p>
                </div>
              </div>

              <div class="rounded-xl bg-gray-50 p-5">
                <h2 class="text-lg md:text-xl font-semibold mb-3">
                  Concern Tags
                </h2>
                <div class="flex flex-wrap gap-2">
                  <template x-for="(tag, i) in concernTags()" :key="'tag-' + i">
                    <span
                      class="px-3 py-1 rounded-full text-xs font-medium bg-amber-100 text-amber-800"
                      x-text="tag"></span>
                  </template>
                  <template x-if="concernTags().length === 0">
                    <span class="text-gray-500 text-sm">None.</span>
                  </template>
                </div>
              </div>

              <!-- Concern tags -->
              <!-- Pros -->
              <section class="rounded-xl bg-gray-50 p-5">
                <h2 class="text-lg md:text-xl font-semibold mb-2">Pros</h2>
                <ul class="list-disc ml-5 space-y-1">
                  <template x-for="(p, i) in prosList()" :key="'pro-' + i">
                    <li class="text-gray-800 break-words" x-text="p"></li>
                  </template>
                  <template x-if="prosList().length === 0">
                    <li class="text-gray-500">No pros listed.</li>
                  </template>
                </ul>
              </section>

              <!-- Cons -->
              <section class="rounded-xl bg-gray-50 p-5">
                <h2 class="text-lg md:text-xl font-semibold mb-2">Cons</h2>
                <ul class="list-disc ml-5 space-y-1">
                  <template x-for="(c, i) in consList()" :key="'con-' + i">
                    <li class="text-gray-800 break-words" x-text="c"></li>
                  </template>
                  <template x-if="consList().length === 0">
                    <li class="text-gray-500">No cons listed.</li>
                  </template>
                </ul>
              </section>

              <!-- Footer link -->
              <div>
                <a
                  href="/score"
                  class="text-primary-600 underline hover:text-primary-800"
                  >&larr; New analysis</a
                >
              </div>
            </div>
          </template>
        </div>
      </div>
    </div>

    <Footer />
  </main>
</Layout>
