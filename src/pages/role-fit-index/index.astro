---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import HeroSection from "../../components/HeroSection.astro";

const DIRECTUS_URL = "https://directus.bounteer.com";
const READ_TOKEN = "dZtMfEuzhzUS0YATh0pOZfBAdOYlhowE";
---

<style is:global>
  [x-cloak] {
    display: none !important;
  }
</style>

<Layout title="Role Fit Index - Bounteer">
  <Header />

  <main>
    <HeroSection
      title="Get Your Role Fit Index"
      highlightText="Role Fit Index"
      description="Instantly analyze how well your CV matches a job description."
      badge="⚡ AI-Powered Career Matching"
    />

    <section class="py-16 bg-white">
      <div class="container-custom max-w-6xl mx-auto">
        <div
          class="relative rounded-2xl border border-gray-200 shadow-xl p-10 bg-white flex flex-col"
          x-data="(function($el){
            return {
              // Config
              directusUrl: $el.dataset.directusUrl,
              writeToken:  $el.dataset.writeToken,
              wsEndpoint: (function(){
                try{
                  const u = new URL($el.dataset.directusUrl);
                  u.protocol = (u.protocol === 'https:') ? 'wss:' : 'ws:';
                  u.pathname = '/websocket'; u.search = '';
                  return u.toString();
                }catch{ return '' }
              })(),

              // State
              isDragging:false,
              isBusy:false,
              fileName:'',
              fileObj:null,
              error:'',
              step:0, // 0 idle, 1 uploading, 2 analyzing
              buttonText:'Analyze Role Fit now',

              // Submission progress
              submissionStatus:'submitted',
              submissionId:null,
              progressSteps:['submitted','parsed_jd','generated_report'],

              // Helpers
              autoGrow(el){
                const max = Math.floor(window.innerHeight * 0.6);
                el.style.height = 'auto';
                el.style.height = Math.min(el.scrollHeight, max) + 'px';
              },
              handleFile(file){ this.validateFile(file); },
              handleDrop(ev){ const f = ev.dataTransfer.files?.[0]; this.validateFile(f); },
              validateFile(file){
                if(!file){ this.error='No file selected'; return false; }
                const maxSize = 2 * 1024 * 1024; // 2MB to match label
                const ext = file.name.split('.').pop()?.toLowerCase();
                if(file.size > maxSize){ this.error='File is too large. Max 2MB.'; this.fileName=''; this.fileObj=null; return false; }
                if(ext !== 'pdf'){ this.error='Only PDF allowed.'; this.fileName=''; this.fileObj=null; return false; }
                this.error=''; this.fileName=file.name; this.fileObj=file; return true;
              },
              labelForStep(s){
                const map = { submitted:'Submitted', parsed_jd:'Parsed JD', generated_report:'Generated Report' };
                return map[s] ?? s.replaceAll('_',' ');
              },
              currentStepIdx(){
                const i = this.progressSteps.indexOf(this.submissionStatus);
                return i >= 0 ? i : 0;
              },
              percentDone(){
                const total = this.progressSteps.length - 1;
                if(total <= 0) return 0;
                return Math.max(0, Math.min(100, Math.round((this.currentStepIdx()/total)*100)));
              },

              // Main action
              async analyze(){
                try{
                  if(!this.fileObj){ this.error='Please select a PDF'; return; }
                  const jdText = this.$refs.jdInput?.value?.trim();
                  if(!jdText){ this.error='Please paste the JD'; return; }
                  if(!this.directusUrl || !this.writeToken){ this.error='Missing Directus config'; return; }

                  // 1) Upload CV
                  this.step = 1; this.isBusy = true; this.buttonText = 'Uploading CV…';
                  const fd = new FormData();
                  fd.append('file', this.fileObj, this.fileName || 'cv.pdf');
                  const upRes = await fetch(`${this.directusUrl}/files`, {
                    method:'POST',
                    headers:{ Authorization:`Bearer ${this.writeToken}` },
                    body:fd
                  });
                  const upJson = await upRes.json();
                  if(!upRes.ok) throw new Error(upJson?.errors?.[0]?.message || 'Upload failed');
                  const fileId = upJson?.data?.id;

                  // 2) Create submission
                  this.buttonText = 'Saving submission…';
                  const subRes = await fetch(`${this.directusUrl}/items/role_fit_index_submission`, {
                    method:'POST',
                    headers:{
                      Authorization:`Bearer ${this.writeToken}`,
                      'Content-Type':'application/json'
                    },
                    body: JSON.stringify({
                      cv_file:fileId,
                      status:'submitted',
                      job_description:{ raw_input: jdText }
                    })
                  });
                  const subJson = await subRes.json();
                  if(!subRes.ok) throw new Error(subJson?.errors?.[0]?.message || 'Submission failed');
                  const submissionId = subJson?.data?.id;
                  if(!submissionId) throw new Error('No submission id returned');

                  // 3) Show progress & wait
                  this.step = 2; this.isBusy = false; this.buttonText = 'Analyzing…';
                  this.error = '';
                  this.awaitReport(submissionId);

                }catch(e){
                  this.error = e?.message || 'Unexpected error';
                  this.isBusy = false; this.step = 0; this.buttonText = 'Analyze Role Fit now';
                }
              },

              // Wait for report (WS + fallback)
              async awaitReport(submissionId){
                this.submissionId = submissionId;
                const wsOk = await this.waitForReportWS(submissionId).catch(() => false);
                if(wsOk) return;
                await this.pollReport(submissionId);
              },

              waitForReportWS(submissionId){
                return new Promise((resolve, reject) => {
                  if (!this.wsEndpoint) { reject(new Error('Realtime endpoint unavailable')); return; }

                  let resolved = false;
                  let pingTimer, safetyTimer;
                  const ws = new WebSocket(this.wsEndpoint);

                  const done = (ok=false) => {
                    if (pingTimer) clearInterval(pingTimer);
                    if (safetyTimer) clearTimeout(safetyTimer);
                    try{ ws.close(); }catch{}
                    if (resolved) return;
                    resolved = true;
                    ok ? resolve(true) : reject(new Error('WS closed'));
                  };

                  safetyTimer = setTimeout(() => { if (!resolved) done(false); }, 90_000);

                  ws.onopen = () => {
                    ws.send(JSON.stringify({ type:'auth', access_token:this.writeToken }));
                    pingTimer = setInterval(() => { try{ ws.send(JSON.stringify({ type:'ping' })); }catch{} }, 25_000);
                  };

                  ws.onmessage = async (evt) => {
                    const text = typeof evt.data === 'string' ? evt.data : await new Response(evt.data).text();
                    let msg; try{ msg = JSON.parse(text); }catch{ return; }

                    if (msg.type === 'auth' && msg.status === 'ok') {
                      ws.send(JSON.stringify({
                        type:'subscribe',
                        collection:'role_fit_index_submission',
                        query:{ fields:['id','status'], filter:{ id:{ _eq: submissionId } }, limit:1 }
                      }));
                      return;
                    }

                    if (msg.type === 'subscription' && (msg.collection?.endsWith('role_fit_index_submission') || msg.event === 'update')) {
                      const rec = Array.isArray(msg.data) ? msg.data[0] : (msg.data?.payload ?? msg.data?.item ?? msg.data);
                      if (!rec || String(rec.id) !== String(submissionId)) return;

                      this.submissionStatus = rec.status;

                      if (rec.status === 'generated_report') {
                        try{
                          const url = new URL(`${this.directusUrl}/items/role_fit_index_report`);
                          url.searchParams.set('limit','1');
                          url.searchParams.set('sort','-date_created');
                          url.searchParams.set('filter[submission][_eq]', String(submissionId));
                          const res = await fetch(url.toString(), { headers:{ Authorization:`Bearer ${this.writeToken}` } });
                          const js = await res.json();
                          if(res.ok && js?.data?.length){
                            const report = js.data[0];
                            done(true);
                            window.location.href = `/role-fit-index/report?id=${encodeURIComponent(report.id)}`;
                            return;
                          }
                          this.error = 'Report ready but fetch failed.';
                        }catch(_e){ this.error = 'Report ready but fetch failed.'; }
                      }

                      if ((rec.status || '').startsWith('failed_')) {
                        this.error = 'Submission failed: ' + rec.status;
                        done(false);
                      }
                    }
                  };

                  ws.onerror = () => done(false);
                  ws.onclose  = () => done(false);
                });
              },

              async pollReport(submissionId){
                const start = Date.now(), ttl = 90_000;
                while(Date.now() - start < ttl){
                  try{
                    const url = new URL(`${this.directusUrl}/items/role_fit_index_report`);
                    url.searchParams.set('limit','1');
                    url.searchParams.set('sort','-date_created');
                    url.searchParams.set('filter[submission][_eq]', String(submissionId));
                    const res = await fetch(url.toString(), { headers:{ Authorization:`Bearer ${this.writeToken}` } });
                    const js = await res.json();
                    if(res.ok && js?.data?.length){
                      const report = js.data[0];
                      window.location.href = `/role-fit-index/report?id=${encodeURIComponent(report.id)}`;
                      return;
                    }
                  }catch(_e){}
                  await new Promise(r => setTimeout(r,2000));
                }
                this.error = 'Still analyzing… Please refresh later.';
              }
            }
          })($el)"
          data-directus-url={DIRECTUS_URL}
          data-write-token={READ_TOKEN}
        >
          <!-- Step 1 Overlay: Uploading file -->
          <div
            x-show="step===1"
            class="absolute inset-0 z-50 flex items-center justify-center bg-white/80 backdrop-blur-sm"
            aria-live="polite"
            role="status"
            x-cloak
          >
            <div class="flex flex-col items-center gap-4">
              <svg
                class="h-12 w-12 animate-spin"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"
                  fill="none"
                  opacity="0.25"></circle>
                <path
                  d="M4 12a8 8 0 018-8"
                  stroke="currentColor"
                  stroke-width="4"
                  fill="none"></path>
              </svg>
              <p class="text-base font-medium text-gray-900">Uploading CV…</p>
              <p class="text-sm text-gray-600">
                Please wait while we upload your file to Directus.
              </p>
            </div>
          </div>

          <h3 class="text-2xl font-semibold text-gray-900 mb-8">
            Upload JD and CV
          </h3>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-10 items-stretch">
            <!-- JD (auto-grow textarea) -->
            <div class="flex flex-col">
              <label
                for="job-description"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Job Description (Text or URL)
              </label>
              <textarea
                id="job-description"
                x-ref="jdInput"
                :disabled="step!==0"
                placeholder="Paste the JD or a JD URL…"
                @input="autoGrow($event.target)"
                x-init="autoGrow($el)"
                class="block w-full rounded-lg border-2 border-dashed border-gray-300
                       p-8 text-sm text-gray-700 placeholder:text-gray-400
                       focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500
                       min-h-[260px] md:min-h-[300px] resize-none overflow-auto
                       transition disabled:opacity-60 disabled:pointer-events-none"
              ></textarea>
            </div>

            <!-- CV dropzone -->
            <div
              @dragover.prevent="isDragging = true"
              @dragleave.prevent="isDragging = false"
              @drop.prevent="isDragging = false; handleDrop($event)"
              :class="step!==0 ? 'opacity-60 pointer-events-none' : ''"
              class="flex flex-col"
            >
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Upload CV (PDF only)</label
              >
              <div
                class="border-2 border-dashed rounded-lg p-8 text-center transition
                       min-h-[260px] md:min-h-[300px] h-full flex flex-col items-center justify-center"
                :class="isDragging ? 'border-primary-500 bg-primary-50' : 'border-gray-300'"
              >
                <div class="flex flex-col items-center justify-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-12 w-12 text-gray-400 mb-4"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M4 16v1a2 2 0 002 2h12a2 2 0 002-2v-1M12 12V4m0 8l-3-3m3 3l3-3"
                    ></path>
                  </svg>
                  <p class="text-sm text-gray-600">
                    Drag & Drop your CV here <br />
                    or
                    <label
                      class="underline text-primary-600 cursor-pointer hover:text-primary-700"
                    >
                      <input
                        type="file"
                        accept="application/pdf"
                        class="hidden"
                        @change="handleFile($event.target.files?.[0])"
                      />
                      choose a file
                    </label>
                    <br /> Supports PDF up to 2MB
                  </p>
                </div>

                <div class="mt-4 w-full max-w-xs min-w-0 mx-auto">
                  <div class="h-6 flex items-center justify-center">
                    <p
                      x-show="fileName"
                      x-cloak
                      class="text-sm text-primary-700 font-medium truncate max-w-full"
                      x-text="`📄 ${fileName}`"
                    >
                    </p>
                  </div>
                  <div class="h-5 flex items-center justify-center">
                    <p
                      x-show="error"
                      x-cloak
                      class="text-sm text-red-600"
                      x-text="error"
                    >
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Analysis progress (single source of truth) -->
          <div
            x-show="step===2"
            x-cloak
            class="mt-8"
            aria-live="polite"
            role="status"
          >
            <div class="w-full bg-gray-200/80 rounded-full h-2 overflow-hidden">
              <div
                class="h-2 bg-primary-600 rounded-full transition-all duration-700 ease-out"
                :style="`width: ${percentDone()}%`"
              >
              </div>
            </div>

            <div class="mt-3 flex items-center justify-between text-xs">
              <template x-for="(s,i) in progressSteps" :key="s">
                <div class="flex items-center gap-1 min-w-0">
                  <!-- Completed -->
                  <svg
                    x-show="i < currentStepIdx()"
                    class="w-3.5 h-3.5 text-primary-700"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    aria-hidden="true"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M16.707 5.293a1 1 0 010 1.414L8.5 14.914a1 1 0 01-1.414 0L3.293 11.12a1 1 0 111.414-1.414l3.086 3.086 7.207-7.207a1 1 0 011.414 0z"
                      clip-rule="evenodd"></path>
                  </svg>
                  <!-- Active -->
                  <svg
                    x-show="i === currentStepIdx()"
                    class="w-3.5 h-3.5 animate-spin text-primary-700"
                    viewBox="0 0 24 24"
                    fill="none"
                    aria-hidden="true"
                  >
                    <circle
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      stroke-width="3"
                      opacity="0.25"></circle>
                    <path
                      d="M4 12a8 8 0 018-8"
                      stroke="currentColor"
                      stroke-width="3"></path>
                  </svg>
                  <span
                    class="truncate"
                    :class="i <= currentStepIdx() ? 'text-primary-700 font-medium' : 'text-gray-500'"
                    x-text="labelForStep(s)"></span>
                </div>
              </template>
            </div>

            <p class="mt-4 text-sm text-gray-600 text-center">
              Analyzing your CV & JD — this usually takes ~30 seconds. You’ll be
              redirected when the report is ready.
            </p>
          </div>

          <!-- Primary button -->
          <div
            x-cloak
            x-show="step===0"
            x-transition.opacity.scale
            class="mt-10 relative h-12"
          >
            <button
              type="button"
              class="btn-primary w-full h-12 flex items-center justify-center gap-2"
              @click.prevent="analyze"
            >
              <span x-text="buttonText"></span>
            </button>
          </div>
        </div>
      </div>
    </section>
  </main>

  <Footer />
</Layout>
