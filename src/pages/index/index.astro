---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import HeroSection from "../../components/HeroSection.astro";

const DIRECTUS_URL = "https://directus.bounteer.com";
const READ_TOKEN = "dZtMfEuzhzUS0YATh0pOZfBAdOYlhowE";
---

<style is:global>
  [x-cloak] {
    display: none !important;
  }
</style>

<Layout title="Role Fit Index - Bounteer">
  <Header />

  <main>
    <HeroSection
      title="Get Your Role Fit Index"
      highlightText="Role Fit Index"
      description="Instantly analyze how well your CV matches a job description."
      badge="⚡ AI-Powered Career Matching"
    />

    <section class="py-16 bg-white">
      <div class="container-custom max-w-6xl mx-auto">
        <div
          class="relative rounded-2xl border border-gray-200 shadow-xl p-10 bg-white flex flex-col"
          x-data="(() => {
            const cfg = $el.dataset;

            // util: convert http(s) -> ws(s)
            const toWs = (url) => {
              try{
                const u = new URL(url);
                u.protocol = (u.protocol === 'https:') ? 'wss:' : 'ws:';
                // Directus realtime endpoint
                u.pathname = '/websocket';
                u.search = '';
                return u.toString();
              }catch{ return '' }
            };

            return {
              // config
              directusUrl: cfg.directusUrl,
              writeToken: cfg.writeToken,
              wsEndpoint: toWs(cfg.directusUrl),

              // state
              isDragging:false,
              isBusy:false,
              fileName:'',
              fileObj:null,
              error:'',
              step:0, // 0 idle, 1 uploading, 2 analyzing/waiting
              buttonText:'Analyze Role Fit now',

              // file + textarea helpers
              autoGrow(el){
                const max = Math.floor(window.innerHeight * 0.6);
                el.style.height = 'auto';
                el.style.height = Math.min(el.scrollHeight, max) + 'px';
              },
              handleFile(file){ this.validateFile(file); },
              handleDrop(ev){ const f = ev.dataTransfer.files?.[0]; this.validateFile(f); },
              validateFile(file){
                if(!file){ this.error='No file selected'; return false; }
                const maxSize = 10 * 1024 * 1024;
                const ext = file.name.split('.').pop()?.toLowerCase();
                if(file.size > maxSize){ this.error='File is too large. Max 2MB.'; this.fileName=''; this.fileObj=null; return false; }
                if(ext !== 'pdf' || file.type !== 'application/pdf'){ this.error='Only PDF allowed.'; this.fileName=''; this.fileObj=null; return false; }
                this.error=''; this.fileName=file.name; this.fileObj=file; return true;
              },

              // main action
              async analyze(){
                try{
                  if(!this.fileObj){ this.error='Please select a PDF'; return; }
                  const jdText = this.$refs.jdInput?.value?.trim();
                  if(!jdText){ this.error='Please paste the JD'; return; }
                  if(!this.directusUrl || !this.writeToken){ this.error='Missing Directus config'; return; }

                  // STEP 1: upload CV
                  this.step = 1; this.isBusy = true; this.buttonText = 'Uploading CV…';
                  const fd = new FormData();
                  fd.append('file', this.fileObj, this.fileName || 'cv.pdf');
                  const upRes = await fetch(`${this.directusUrl}/files`, {
                    method:'POST',
                    headers:{ Authorization:`Bearer ${this.writeToken}` },
                    body:fd
                  });
                  const upJson = await upRes.json();
                  if(!upRes.ok) throw new Error(upJson?.errors?.[0]?.message || 'Upload failed');
                  const fileId = upJson?.data?.id;

                  // STEP 2: create submission (includes nested JD by raw_input)
                  this.buttonText = 'Saving submission…';
                  const subRes = await fetch(`${this.directusUrl}/items/role_fit_index_submission`, {
                    method:'POST',
                    headers:{
                      Authorization:`Bearer ${this.writeToken}`,
                      'Content-Type':'application/json'
                    },
                    body: JSON.stringify({
                      cv_file:fileId,
                      status:'analyzing',
                      job_description: { raw_input: jdText }
                    })
                  });
                  const subJson = await subRes.json();
                  if(!subRes.ok) throw new Error(subJson?.errors?.[0]?.message || 'Submission failed');
                  const submissionId = subJson?.data?.id;
                  if(!submissionId) throw new Error('No submission id returned');

                  // STEP 3: switch to analyzing UI + wait for report via WS (fallback: poll)
                  this.step = 2; // analyzing
                  this.buttonText = 'Analyzing…';
                  this.error = '';

                  // fire-and-wait
                  this.awaitReport(submissionId);

                }catch(e){
                  this.error = e?.message || 'Unexpected error';
                  this.isBusy = false; this.step = 0; this.buttonText = 'Analyze Role Fit now';
                }
              },

              // ---- Waiting for report (WS + fallback poll) ----
              async awaitReport(submissionId){
                // try WS first; if it fails, start polling
                const wsOk = await this.waitForReportWS(submissionId).catch(() => false);
                if(wsOk) return;

                // fallback polling
                console.log('fall back to polling')
                await this.pollReport(submissionId);
              },

              waitForReportWS(submissionId){
                return new Promise((resolve, reject) => {
                  if (!this.wsEndpoint) { reject(new Error('Realtime endpoint unavailable')); return; }

                  let resolved = false;
                  let pingTimer, safetyTimer;
                  const ws = new WebSocket(this.wsEndpoint);

                  const done = (ok=false, reportId=null) => {
                    if (pingTimer) clearInterval(pingTimer);
                    if (safetyTimer) clearTimeout(safetyTimer);
                    try { ws.close(); } catch {}
                    if (resolved) return;
                    resolved = true;
                    if (ok) resolve(reportId ?? true);
                    else reject(new Error('WS closed'));
                  };

                  // avoid hanging forever
                  safetyTimer = setTimeout(() => { if (!resolved) done(false); }, 90_000);

                  ws.onopen = () => {
                    // auth
                    ws.send(JSON.stringify({ type:'auth', access_token:this.writeToken }));
                    // heartbeat
                    pingTimer = setInterval(() => {
                      try { ws.send(JSON.stringify({ type:'ping' })); } catch {}
                    }, 25_000);
                  };

                  ws.onerror = () => { if (!resolved) reject(new Error('Realtime error')); };

                  ws.onmessage = async (evt) => {
                    // robust parse (handles Blob and string)
                    const text = typeof evt.data === 'string' ? evt.data : await new Response(evt.data).text();
                    let msg; try { msg = JSON.parse(text); } catch { console.warn('WS non-JSON:', text); return; }

                    // debug
                    console.log('ws msg:', { type: msg.type, event: msg.event, collection: msg.collection, data: msg.data });

                    // auth ack -> subscribe
                    if (msg.type === 'auth' && msg.status === 'ok') {
                      ws.send(JSON.stringify({
                        type: 'subscribe',
                        collection: 'role_fit_index_report',
                        query: {
                          fields: ['id','submission'],
                          limit: 1,
                          sort: ['-date_created'],
                          filter: { submission: { _eq: submissionId } }
                        }
                      }));
                      return;
                    }

                    // ignore pings/inits
                    if (msg.type === 'pong' || msg.event === 'init') return;

                    const col = String(msg.collection || msg?.data?.collection || '').replace(/^items\./, '');
                    const isReport = col === 'role_fit_index_report';

                    // INITIAL SNAPSHOT (array)
                    if (msg.type === 'subscription' && Array.isArray(msg.data) && msg.data.length) {
                      const found = msg.data.find(r => String(r.submission) === String(submissionId));
                      if (found) {
                        done(true, found.id);
                        window.location.href = `/index/report?id=${encodeURIComponent(found.id)}`;
                      }
                      return;
                    }

                    // CREATE/INSERT EVENTS
                    if (msg.type === 'subscription' && isReport && (msg.event === 'create' || msg.event === 'insert')) {
                      // payload shape can vary across Directus versions
                      const rec = msg.data?.payload ?? msg.data?.item ?? msg.data;
                      console.log('report event rec:', rec);

                      const sub = rec?.submission ?? rec?.item?.submission ?? rec?.payload?.submission;
                      const id  = rec?.id ?? rec?.item?.id ?? rec?.payload?.id;

                      if (String(sub) === String(submissionId) && id != null) {
                        done(true, id);
                        window.location.href = `/index/report?id=${encodeURIComponent(id)}`;
                      }
                      return;
                    }
                  };

                  ws.onclose = () => done(false);
                });
              },

              async pollReport(submissionId){
                // poll every 2s up to ~90s
                const start = Date.now();
                const ttl = 90_000;
                while(Date.now() - start < ttl){
                  try{
                    const url = new URL(`${this.directusUrl}/items/role_fit_index_report`);
                    url.searchParams.set('limit','1');
                    url.searchParams.set('sort','-date_created');
                    url.searchParams.set('fields','id,submission');
                    url.searchParams.set('filter[submission][_eq]', String(submissionId));

                    const res = await fetch(url.toString(), {
                      headers:{ Authorization:`Bearer ${this.writeToken}` }
                    });
                    const js = await res.json();
                    if(res.ok && js?.data?.length){
                      window.location.href = `/index/report?id=${encodeURIComponent(submissionId)}`;
                      return;
                    }
                  }catch(_e){}
                  await new Promise(r => setTimeout(r, 2000));
                }
                // gave up
                this.error = 'Still analyzing… You can refresh this page or check back later.';
                this.isBusy = false;
                this.buttonText = 'Analyzing…';
              }
            }
          })()"
          data-directus-url={DIRECTUS_URL}
          data-write-token={READ_TOKEN}
        >
          <!-- OVERLAYS -->
          <!-- 1) Uploading -->
          <div
            x-show="step===1"
            class="absolute inset-0 z-50 flex items-center justify-center bg-white/80 backdrop-blur-sm"
            aria-live="polite"
            role="status"
            x-cloak
          >
            <div class="flex flex-col items-center gap-4">
              <svg
                class="h-12 w-12 animate-spin"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"
                  fill="none"
                  opacity="0.25"></circle>
                <path
                  d="M4 12a8 8 0 018-8"
                  stroke="currentColor"
                  stroke-width="4"
                  fill="none"></path>
              </svg>
              <p class="text-base font-medium text-gray-900">Uploading CV…</p>
              <p class="text-sm text-gray-600">
                Please wait while we upload your file to Directus.
              </p>
            </div>
          </div>

          <!-- 2) Analyzing / Waiting for Report -->
          <div
            x-show="step===2"
            class="absolute inset-0 z-50 flex items-center justify-center bg-white/80 backdrop-blur-sm"
            aria-live="polite"
            role="status"
            x-cloak
          >
            <div class="flex flex-col items-center gap-4 text-center">
              <svg
                class="h-12 w-12 animate-spin"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"
                  fill="none"
                  opacity="0.25"></circle>
                <path
                  d="M4 12a8 8 0 018-8"
                  stroke="currentColor"
                  stroke-width="4"
                  fill="none"></path>
              </svg>
              <p class="text-base font-medium text-gray-900">
                Analyzing your Role Fit (takes about 30 seconds in total)
              </p>
              <p class="text-sm text-gray-600">
                We’ll take you to your report as soon as it’s ready.<br />
                <span x-show="error" x-text="error" class="text-red-600"></span>
              </p>
            </div>
          </div>

          <h3 class="text-2xl font-semibold text-gray-900 mb-8">
            Upload JD and CV
          </h3>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-10 items-stretch">
            <!-- JD (auto-grow textarea only) -->
            <div class="flex flex-col">
              <label
                for="job-description"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Job Description (Text or URL)
              </label>
              <textarea
                id="job-description"
                x-ref="jdInput"
                :disabled="isBusy"
                placeholder="Paste the JD or a JD URL…"
                @input="autoGrow($event.target)"
                x-init="autoGrow($el)"
                class="block w-full rounded-lg border-2 border-dashed border-gray-300
                       p-8 text-sm text-gray-700 placeholder:text-gray-400
                       focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500
                       min-h-[260px] md:min-h-[300px] resize-none overflow-auto
                       transition disabled:opacity-60 disabled:pointer-events-none"
              ></textarea>
            </div>

            <!-- CV dropzone -->
            <div
              @dragover.prevent="isDragging = true"
              @dragleave.prevent="isDragging = false"
              @drop.prevent="isDragging = false; handleDrop($event)"
              :class="isBusy ? 'opacity-60 pointer-events-none' : ''"
              class="flex flex-col"
            >
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Upload CV (PDF only)</label
              >
              <div
                class="border-2 border-dashed rounded-lg p-8 text-center transition
                       min-h-[260px] md:min-h-[300px] h-full flex flex-col items-center justify-center"
                :class="isDragging ? 'border-primary-500 bg-primary-50' : 'border-gray-300'"
              >
                <div class="flex flex-col items-center justify-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-12 w-12 text-gray-400 mb-4"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M4 16v1a2 2 0 002 2h12a2 2 0 002-2v-1M12 12V4m0 8l-3-3m3 3l3-3"
                    ></path>
                  </svg>
                  <p class="text-sm text-gray-600">
                    Drag & Drop your CV here <br />
                    or
                    <label
                      class="underline text-primary-600 cursor-pointer hover:text-primary-700"
                    >
                      <input
                        type="file"
                        accept="application/pdf"
                        class="hidden"
                        @change="handleFile($event.target.files?.[0])"
                      />
                      choose a file
                    </label>
                    <br /> Supports PDF up to 2MB
                  </p>
                </div>

                <div class="mt-4 w-full max-w-xs min-w-0 mx-auto">
                  <div class="h-6 flex items-center justify-center">
                    <p
                      x-show="fileName"
                      x-cloak
                      class="text-sm text-blue-600 font-medium truncate max-w-full"
                      x-text="`📄 ${fileName}`"
                    >
                    </p>
                  </div>
                  <div class="h-5 flex items-center justify-center">
                    <p
                      x-show="error"
                      x-cloak
                      class="text-sm text-red-600"
                      x-text="error"
                    >
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Primary button -->
          <div class="mt-10 relative h-12">
            <button
              x-cloak
              x-show="!isBusy && step === 0"
              x-transition.opacity.scale
              type="button"
              class="btn-primary w-full h-12 flex items-center justify-center gap-2"
              @click.prevent="analyze"
            >
              <span x-text="buttonText"></span>
            </button>
          </div>
        </div>
      </div>
    </section>
  </main>

  <Footer />
</Layout>
